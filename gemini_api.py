import streamlit as st  # Importing Streamlit library for building interactive web apps
from PIL import Image  # Importing Image module from PIL library for image processing
import google.generativeai as genai  # Importing the Google Gemini AI module
from fpdf import FPDF  # Importing FPDF library for PDF generation

# Function to load Gemini model and get response for image
def get_gemini_response(image):
    """
    This function takes an image as input, loads the Gemini model ('gemini-pro-vision'),
    and generates a response based on the image content using the Gemini model.
    It returns the text response generated by the model.
    """
    model = genai.GenerativeModel('gemini-pro-vision')  # Load Gemini model
    if image:  # Check if image is provided
        response = model.generate_content([image])  # Generate response for image
    else:
        response = model.generate_content(image)  # Generate response for empty image
    return response.text  # Return the text response generated by the model

# Function to load Gemini model and get response for text
def get_gemini_response_text(given_text):
    """
    This function takes a text input, loads the Gemini model ('gemini-pro'),
    and generates a response based on the input text using the Gemini model.
    It returns the text response generated by the model.
    """
    model = genai.GenerativeModel('gemini-pro')  # Load Gemini model
    response = model.generate_content(given_text)  # Generate response for text
    return response.text  # Return the text response generated by the model

# Function to generate PDF
def generate_pdf(response):
    """
    This function generates a PDF document with the provided response content.
    It creates a PDF object, adds a page, sets font and formatting, and writes
    the response content to the PDF. Finally, it returns the PDF content as bytes.
    """
    pdf = FPDF()  # Create PDF object
    pdf.add_page()  # Add a page to the PDF
    pdf.set_font("Arial", size=12)  # Set font and size
    pdf.cell(200, 10, txt="Gemini Response:", ln=True)  # Add title to PDF
    pdf.multi_cell(0, 10, response)  # Write response content to PDF
    return pdf.output(dest='S').encode('latin1')  # Return PDF content as bytes

# Initialize Streamlit app
st.set_page_config(page_title="Gemini Image Demo")  # Set Streamlit page configuration

st.title("üñºÔ∏èüîçImage Analysis and Blog Generation Tool using GEMINI API")
 
"""
This is an interactive web application built using Streamlit, designed to analyze the given images using Google's Gemini AI model 
and generate insightful blog content üìùbased on the image analysis. 
This tool leverages the power of artificial intelligence to provide users with detailed analysis and 
creative content generation capabilities.
"""

# Input field for Google API key in the sidebar
google_api_key = st.sidebar.text_input("Enter your Google API Key:")

with st.sidebar:
    "[Get an Google API key](https://aistudio.google.com/app/apikey)"

# Check if API key is provided
if google_api_key:
    # Configure Gemini API with the provided API key
    genai.configure(api_key=google_api_key)

    # File upload section
    uploaded_file = st.file_uploader("Choose an image...", type=["jpg", "jpeg", "png"])

    # Display uploaded image if available
    if uploaded_file is not None:
        image = Image.open(uploaded_file)
        st.image(image, caption="Uploaded Image.", use_column_width=True)

    # Button to generate response and write a blog
    submit = st.button("Tell me about the image and write a blog on the given image")

    # Handle button click event
    if submit:
        if uploaded_file is not None:
            response = get_gemini_response(image)  # Generate response for image
            st.subheader("The Response is")  # Display response header
            st.write(response)  # Display response content
            
            # Generate blog using the response
            blog_content = get_gemini_response_text(response)

            # Generate PDF from the blog content
            pdf_bytes = generate_pdf(blog_content)

            # Provide a download button to download the generated PDF
            st.download_button(
                label="Download PDF",
                data=pdf_bytes,
                file_name="Gemini_Response.pdf",
                mime="application/pdf"
            )
        else:
            st.warning("Please upload an image first.")  # Display warning if no image is uploaded
else:
    st.warning("Please enter your Google API Key.")  # Display warning if API key is not provided
